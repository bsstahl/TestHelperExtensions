using System;
using System.Diagnostics.CodeAnalysis;
using Xunit;

namespace TestHelperExtensions.Test
{
    [ExcludeFromCodeCoverage]
    public class EnumerableExtensions_StdDev_Should
    {


        byte[] _byteData = new byte[] { 27, 133, 224, 176, 66, 64, 197, 205, 99, 137, 126, 55, 234, 2, 10, 144, 146, 177, 38, 183, 46, 53, 77, 190, 39, 217, 36, 152, 243, 164, 113, 198, 181, 103, 21, 207, 246, 54, 86, 250, 60, 119, 249, 100, 244, 142, 9, 42, 246, 179, 129, 86, 130, 55, 202, 228, 56, 33, 137, 103, 27, 45, 216, 189, 24, 183, 129, 130, 236, 57, 153, 91, 91, 43, 123, 182, 59, 231, 201, 151, 208, 248, 160, 64, 34, 26, 68, 125, 155, 47, 150, 212, 172, 238, 222, 15, 157, 60, 76, 61, 13, 133, 61, 188, 25, 38, 250, 86, 186, 20, 169, 80, 87, 240, 149, 33, 139, 151, 155, 253, 114, 3, 230, 188, 162, 195, 173, 108, 75, 107, 24, 253, 154, 140, 138, 75, 187, 227, 39, 250, 30, 236, 193, 135, 132, 70, 125, 187, 88, 189, 131, 6, 159, 77, 201, 9, 158, 128, 25, 84, 120, 142, 10, 79, 250, 170, 180, 201, 102, 74, 101, 166, 112, 159, 223, 133, 64, 95, 55, 92, 70, 241, 19, 141, 231, 18, 94, 77, 193, 128, 172, 59, 201, 209, 130, 143, 225, 114, 139, 216, 144, 178, 85, 14, 88, 219, 148, 0, 109, 67, 200, 62, 72, 188, 14, 133, 122, 124, 102, 232, 76, 103, 7, 228, 156, 41, 219, 157, 28, 79, 162, 204, 210, 93, 202, 146, 156, 5, 53, 11, 124, 94, 223, 126, 182, 109, 242, 13, 194, 251, 20, 101, 12, 162, 140, 41, 170, 111, 112, 46, 0, 245, 226, 29, 159, 250, 107, 233, 240, 123, 232, 117, 70, 90, 107, 237, 134, 136, 46, 47, 54, 206, 218, 31, 59, 61, 192, 48, 208, 161, 230, 45, 147, 6, 11, 133, 122, 193, 221, 187, 2, 8, 27, 71, 19, 158, 30, 176, 54, 158, 161, 33, 64, 64, 246, 49, 27, 195, 224, 98, 58, 58, 24, 78, 147, 187, 224, 64, 79, 228, 114, 196, 170, 114, 45, 45, 178, 146, 12, 156, 31, 15, 248, 50, 0, 196, 235, 82, 15, 216, 106, 182, 223, 122, 128, 198, 239, 203, 179, 86, 188, 221, 97, 81, 43, 220, 118, 205, 19, 200, 126, 136, 182, 68, 67, 43, 65, 229, 78, 205, 207, 142, 49, 117, 122, 187, 227, 48, 240, 102, 61, 229, 222, 181, 223, 64, 173, 167, 6, 34, 78, 29, 63, 69, 90, 224, 254, 155, 55, 84, 133, 9, 125, 228, 133, 45, 172, 234, 213, 111, 248, 69, 220, 172, 139, 151, 168, 1, 100, 2, 125, 152, 222, 43, 126, 178, 79, 234, 27, 152, 187, 71, 248, 155, 224, 51, 104, 249, 47, 177, 147, 194, 208, 150, 41, 8, 64, 146, 185, 193, 56, 253, 54, 52, 214, 235, 42, 81, 101, 209, 221, 192, 206, 61, 178, 176, 76, 64, 202, 87, 47, 174, 208, 178, 110, 186, 199, 72, 2, 118, 114, 187, 49, 89, 96, 188, 17, 195, 196, 244, 9, 22, 147, 92, 210, 210, 242, 147, 226, 120, 186, 254, 198, 97, 145, 136, 45, 131, 197, 28, 35, 224, 79, 238, 95, 33, 142, 117, 219, 245, 159, 136, 123, 213, 77, 25, 26, 115, 222, 154, 198, 52, 100, 136, 186, 114, 244, 207, 198, 214, 143, 140, 253, 167, 208, 39, 198, 164, 252, 176, 67, 124, 182, 236, 215, 50, 131, 239, 20, 120, 110, 184, 163, 42, 84, 238, 124, 197, 51, 235, 44, 190, 174, 5, 101, 18, 138, 210, 5, 37, 81, 116, 118, 45, 87, 74, 125, 118, 176, 135, 237, 4, 187, 77, 104, 214, 232, 210, 82, 225, 170, 0, 112, 16, 132, 132, 205, 177, 135, 197, 167, 175, 234, 237, 38, 248, 66, 117, 210, 10, 113, 5, 21, 171, 253, 39, 3, 96, 155, 141, 41, 182, 128, 34, 122, 81, 3, 101, 168, 209, 124, 203, 238, 234, 223, 61, 24, 204, 38, 111, 148, 114, 0, 71, 111, 164, 234, 196, 18, 93, 129, 108, 21, 248, 155, 240, 47, 199, 114, 212, 244, 219, 204, 0, 141, 165, 22, 42, 203, 191, 14, 53, 58, 44, 248, 182, 182, 56, 178, 213, 102, 62, 83, 74, 80, 15, 181, 244, 78, 238, 14, 79, 89, 81, 121, 183, 164, 254, 185, 201, 141, 191, 248, 82, 78, 75, 50, 231, 254, 228, 57, 245, 21, 156, 110, 182, 136, 129, 175, 125, 238, 32, 218, 220, 177, 189, 218, 231, 177, 65, 17, 183, 126, 231, 71, 165, 68, 0, 251, 5, 220, 204, 245, 105, 180, 23, 58, 188, 225, 193, 46, 34, 78, 59, 217, 109, 228, 28, 159, 144, 111, 73, 53, 189, 210, 129, 119, 45, 85, 200, 114, 135, 133, 170, 160, 34, 42, 113, 39, 153, 131, 30, 6, 239, 18, 238, 104, 67, 14, 217, 191, 40, 96, 107, 148, 147, 150, 55, 150, 50, 159, 13, 103, 25, 79, 166, 156, 163, 154, 183, 66, 115, 243, 6, 12, 81, 67, 69, 171, 227, 25, 52, 30, 122, 8, 73, 39, 26, 21, 12, 138, 242, 217, 244, 249, 118, 182, 236, 159, 106, 81, 195, 168, 85, 151, 76, 51, 89, 94, 67, 80, 80, 138, 177, 24, 106, 237, 235, 16, 5, 126, 130, 141, 141, 45, 78, 152, 254, 11, 149, 153, 85, 165, 64, 145, 85, 138, 200, 226, 187, 22, 204, 186, 209, 187, 57, 103, 40, 219, 142, 136, 202, 219, 153, 235, 206, 53, 26, 40, 72, 178, 52, 78, 200, 168, 249, 169, 74, 32, 194, 222, 36, 8, 83, 238, 176, 198, 186, 208, 242, 230, 112, 34, 123, 13, 206, 120, 12, 84, 194, 31, 112, 159, 154, 8, 225, 126, 241, 41, 192, 142, 29, 7, 25, 174, 99, 193, 136, 169, 58, 8, 122, 72, 53, 96, 66, 17, 210, 187, 216, 128, 157, 244, 93, 163, 110, 132, 109, 74, 13, 50, 212, 145, 15, 99, 200, 104, 9, 203, 168 };
        double[] _doubleData = new double[] { -9271.64149404673, 11645.6777010261, 4383.56688638198, -29676.9528633137, 19855.802975594, -6379.59736264106, -13212.7016219421, -26443.9035230609, 22487.8431377447, 7044.60749709122, 20885.818702476, 4760.57263729143, -28317.9321276419, -20272.8093605911, 2264.53454861396, 32170.9908993426, -24863.879422781, -2691.54107488112, -22512.8435450694, 4589.57002944107, 12283.6874283709, -18483.7820651102, -3720.55677523862, 8596.63116557274, 8777.63393847581, 25543.8897734899, 1293.51973293094, 1311.520006635, -27412.9183095577, -21908.8343209759, 27422.9184444579, 27566.9206441897, -25645.8913477929, 7995.62199811527, -6664.60170055907, -23141.8531371722, -14373.7193472365, -2340.53572457821, 21506.8281714501, -1452.52217421705, -14889.7272229198, 5554.58474716292, 18344.7799310604, -23087.8523142216, -17162.7619019969, 25300.8860770855, -19002.7899785618, 30203.9608911546, -25423.8879627306, -7785.61881405842, -19136.7920313532, 23803.863228531, -18034.77520341, 24384.8720981599, -29535.950716461, -23553.8594289366, -17399.7655237353, 28554.9357208092, -5687.58680178951, 27078.9132021041, 25092.882904428, 18242.7783714229, -31796.9852135032, 11629.6774587206, 12389.6890526333, 26086.8980582864, -2359.53601491569, -3546.55412575721, 19158.7923399679, -7359.61231421382, 13778.7102465791, 10243.6563017972, 8569.63075366878, 11706.6786291477, -13285.7027476391, -26036.897318792, -4062.56199617058, -13398.704461017, -7006.60693243035, 16243.7478613903, 11780.6797520517, 3856.55884177636, -6030.59203063445, 13139.7005045007, 29995.9577103774, -29147.9447840731, 12834.6958475996, -17263.7634459528, 4765.5727145763, -15876.7422716225, 27025.9123865631, -10161.6550680458, -29418.9489227887, 27194.914969346, 6220.59492135495, -366.505594342717, 4585.56996066615, -26050.8975276602, -2710.54136685493, -10482.6599602833 };
        int[] _intData = new int[] { -26292, 30514, -4049, 26186, 29502, 4955, -5713, -1531, -2395, -32235, 19604, 579, -25724, -8913, -14237, -1329, 8934, 24172, 29399, -9403, 25830, -8296, 30229, 5877, 32274, 9709, 3299, 18683, 141, -10233, 19725, -25332, 20029, 14129, 5790, -8398, -11898, 6247, 6452, 21190, 14534, -19250, 4543, -1 };
        long[] _longData = new long[] { -207401745, -1694938395, -7523777, 515442223, 1073318875, -630777991, 1774784029, -693338793, -2075740179, -2065943209, 1101762559, 355623597, -1539912079, 43649655, 1233167701, -1129398217, -1400610191, -308555869, -517398831, 1440582675, -116238613, -2008603801, 2085453485, -2067702725, -785463471, -1542322393, 671507589, -2108662275, 1815532867, -1368847397, 1257114311, -1786457471, 2118166305, -1394717063, 1277048485, -1276524995, 1344915259, 2074470821, -873286687, -141672417, 1131017157, 1317465173, -237314415, -1969606029, 368286301, 967849377, 255565461, 1432474777, -366629227, 485988861, 965207135, -394974657, 1639441407, 1753737003, 1247519985, -346281591, -1632908233, -87304699, -846577953, 468157621, 845198067, 1735962657, -361388013, 1440590865, -1175573873, 740736383, 384940939, 2002288631, 914084817, 362209049, -326829829, -1327597365, -1582752829, 1771757233, -1837918129, 713779861, 376194261, 1907575867, -288505379, 394170799, 349595793, 1386516459, 405450599, -817939641, -186570885, -495394679, -1278415231, -1783054345, -494753401, -524153571, -1791100409, -715263689, 773565127, 806039339, 1160613163, 1542538147, -468630461, 469578367, 1353451491, 1775033565, -1564575209, 400760477, -1629093687, 1418645371, -1334664957, 145320853, -959705475, 2015167821, 1444171485, -1613743523, 1425007795, -1393000453, -1946282967, 906734895, -2028921819, 1606165255, -816971589, -1690932019, -520321897, 1467304453, -128332033, 20511637, 349558385, -709245259, 5825811, -1759049787, 46321155, -241308521, -1536339577, -1232972629, -965073325, 2054099541, -1593359271, 83944703, -188737639, 2096318963, 868126499, 1134288875, -1630758331, 1815591909, -1683172851, -1146099405, -1079742183, -1028493525, 198322281, 1749383691, -916464369, 2014313879, 687477511, 1701931555, 212026089, -925182089, -1157583383, 2033630685, -244118049, 562396801, -2096281555, 1227635219, -734664087, -1723098817, -2048483949, 1429086693, 1404023751, 529660467, 1498813449, 1518391901, -1947124829, 117255977, -1052011113, -1977757135, -1409444891, 196223183, 2087309959, -188430159, 1002993657, -1129716275, -1047229827, -769431737, 1239916107, 403925767, 1304898229, 179490923, 1218697615, -1090787485, 702484929, 2107592411, 1064199277, -1479506309, -1819420895, 1396349207, 2045116871, 1787974927, -278530685, -2055143161, 1716592211, -964775897, -402639509, 538080997, -379823327, 827414027, 1549024873, 1113763301, 918841345, 517750999, 963892799, -2131680741, -865008401, 1178330423, -1116846619, -1261885421, -537857019, 820633829, 2135202759, 1008893793, -880513399, -80491225, -1937094569, 347327589, 1974659185, 1538704685, -1693291023, 1679865127, -210806775, -300876673, -1875390359, -1049936171, -1672729779, 1994969473, 242461277, -179714093, 1420406881, 562172823, 1757875237, -1734981567, 1002384541, -1956348719, 1408133225, -1446537031, 92803363, 686682023, 825117165, 2033352501, 1784823957, 1589948173, -213277421, -923000605, 1800255815, 860059169, 972853885, -350400211 };
        short[] _shortData = new short[] { -23974, 7498, -7330, 21223, 28175, 23702, 22749, -5561, -2894, 24322, 19621, 19621, -32449, 17175, 2917, -21698, 5906, -21559, -28437, -13175, -22553, -4376, -14360, 6867, 14266, 6843, -11869, -7887, 24301, 23721, -26631, -17843, 21362, -65, -3918, -25206, 24025, 24677, 17171, 27396, 20243, -27587, 4453, 20162, -3463, 12975, 21203, 32023, 6711, 14111, 30231, -8711, -13615, 13386, -7530, 13168, -10910, 18569, -25810, -11435, 2804, -2132, 2905, 6152, 18186, 4697, 31026, 382, -11674, -4644, -12956, 13996, -5963, -23067, -652, -27734, 23938, -1755, -22437, -31476, 18407, -11126, 18168, -22577, 26256, 14847, 28538, -24792, -25303, 15680, 18470, -27312, 17719, -4161, -8175, -10393, 2275, 31068, -30791, 24606, 14715, -11947, 10930, -21412, -5701, -16532, 30019, -23315, -18730, -12563, 21996, 23612, 8239, -27101, 2924, -18838, 12467, -7285, 12662, -29428, 8926, 23050, -7082, 5412, 9652, -18411, 29043, 30964, 17874, -23026, 2757, 25637, -3732, -14277, -13425, -2414, 10711, 6813, 15890, 10021, 17594, 19085, 26704, 20026, 26451, 27624, -2785, 12052, 25681, -22105, 9907, -23207, -14362, 31403, -17088, 24431, 27902, -27250, 1703, -20057, -12809, 31822, -8423, -28471, 17447, 29126, -5424, -10251, 19091, -27429, 3218, -27114, 9592, -30126, -14256, 22608, 29113, 5658, 11728, 14794, 17140, -15776, -27485, 7212, -166, -6803, 7232, -2368, -29957, -5089, 2451, 5193, -27657, 3179, -9938, 18539, -5260, 22408, -30188, 30091, 281, -25301, 25728, 20343, 7444, 4253, -32, -17003, 12892, -6929, 28085, -10524, -6211, 19675, -4430, -29800, 26539, 17132, 4462, -8518, -10873, 29711, -13062, -8587, 2887, 30791, -32224, -26355, 12578, -28, -4899, -26062, 3078, 14403, -18254, 9674, -8738, -15062, 32535, 28347, 25996, -8533, 17506, 9739, -408, -19793, -21364, -14566, -25159, -12905 };


        [Fact]
        public void CorrectlyCalculateThePopulationStandardDeviationOfAListOfBytes()
        {
            var result = System.Math.Round(_byteData.StdDev(), 5);
            Assert.Equal(73.61042, result);
        }

        [Fact]
        public void CorrectlyCalculateThePopulationStandardDeviationOfAListOfDoubles()
        {
            var result = System.Math.Round(_doubleData.StdDev(), 5);
            Assert.Equal(18294.47919, result);
        }

        [Fact]
        public void CorrectlyCalculateThePopulationStandardDeviationOfAListOfIntegers()
        {
            var result = System.Math.Round(_intData.StdDev(), 5);
            Assert.Equal(16959.71675, result);
        }

        [Fact]
        public void CorrectlyCalculateThePopulationStandardDeviationOfAListOfLongs()
        {
            var result = System.Math.Round(_longData.StdDev(), 5);
            Assert.Equal(1268291446.64256, result);
        }

        [Fact]
        public void CorrectlyCalculateThePopulationStandardDeviationOfAListOfShorts()
        {
            var result = System.Math.Round(_shortData.StdDev(), 5);
            Assert.Equal(18514.15116, result);
        }

        [Fact]
        public void ThrowAnErrorIfFewerThan2ItemsAreInTheList()
        {
            var data = new int[] { 10 };
            Assert.Throws<InvalidOperationException>(() => data.StdDev());
        }

    }
}
